import { ChangedElements } from './components/SelectionArea';
export declare const blockSelectionStore: import("@udecode/plate-core").StoreApi<"selection", {
    selectedIds: Set<unknown>;
}, import("@udecode/zustood").SetRecord<{
    selectedIds: Set<unknown>;
}> & {
    state: import("@udecode/zustood").SetImmerState<{
        selectedIds: Set<unknown>;
    }>;
    mergeState: import("@udecode/zustood").MergeState<{
        selectedIds: Set<unknown>;
    }>;
} & {
    setSelectedIds: ({ added, removed }: ChangedElements) => void;
    reset: () => void;
}, {
    isSelecting: () => boolean;
    isSelected: (id?: string | undefined) => boolean | "" | undefined;
}>;
export declare const useBlockSelectionSelectors: () => import("@udecode/zustood").StoreApiUse<{
    selectedIds: Set<unknown>;
}, {
    isSelecting: () => boolean;
    isSelected: (id?: string | undefined) => boolean | "" | undefined;
}>;
export declare const blockSelectionSelectors: import("@udecode/zustood").StoreApiGet<{
    selectedIds: Set<unknown>;
}, {
    isSelecting: () => boolean;
    isSelected: (id?: string | undefined) => boolean | "" | undefined;
}>;
export declare const blockSelectionActions: import("@udecode/zustood").SetRecord<{
    selectedIds: Set<unknown>;
}> & {
    state: import("@udecode/zustood").SetImmerState<{
        selectedIds: Set<unknown>;
    }>;
    mergeState: import("@udecode/zustood").MergeState<{
        selectedIds: Set<unknown>;
    }>;
} & {
    setSelectedIds: ({ added, removed }: ChangedElements) => void;
    reset: () => void;
};
//# sourceMappingURL=blockSelectionStore.d.ts.map