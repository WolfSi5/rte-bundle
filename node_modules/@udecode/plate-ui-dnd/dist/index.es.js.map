{"version":3,"file":"index.es.js","sources":["../src/createDndPlugin.ts","../src/components/Draggable.styles.ts","../src/hooks/useDragNode.ts","../src/utils/getHoverDirection.ts","../src/utils/getNewDirection.ts","../src/transforms/onDropNode.ts","../src/transforms/onHoverNode.ts","../src/hooks/useDropNode.ts","../src/hooks/useDndNode.ts","../src/hooks/useDragBlock.ts","../src/hooks/useDndBlock.ts","../src/components/Draggable.tsx","../src/components/grabberTooltipProps.tsx","../src/components/withDraggable.tsx","../src/hooks/useDropBlock.ts","../src/queries/getBlocksWithId.ts","../src/queries/getNodesRange.ts","../src/transforms/focusBlockStartById.ts","../src/transforms/removeBlocksAndFocus.ts","../src/transforms/selectBlockById.ts","../src/transforms/selectBlocksBySelectionOrId.ts"],"sourcesContent":["import { createPluginFactory } from '@udecode/plate-core';\n\nexport const KEY_DND = 'dnd';\n\nexport const createDndPlugin = createPluginFactory({\n  key: KEY_DND,\n  handlers: {\n    onDrop: (editor) => () => editor.isDragging as boolean,\n  },\n});\n","import { Value } from '@udecode/plate-core';\nimport { createStyles } from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\nimport { DraggableStyleProps } from './Draggable.types';\n\nexport const getDraggableStyles = <V extends Value>(\n  props: DraggableStyleProps<V>\n) =>\n  createStyles(\n    { prefixClassNames: 'Draggable', ...props },\n    {\n      root: [\n        tw`relative`,\n        props.isDragging && tw`opacity-50`,\n        props.selected && tw`backgroundColor[rgb(181, 215, 255)]`,\n        css`\n          :hover .slate-Draggable-gutterLeft {\n            ${tw`opacity-100`}\n          }\n        `,\n      ],\n\n      block: tw`overflow-auto`,\n      gutterLeft: [\n        tw`absolute top-0 flex h-full opacity-0 pointer-events-none cursor-text`,\n        css`\n          transform: translateX(-100%);\n        `,\n      ],\n\n      blockToolbarWrapper: tw`flex height[1.5em]`,\n      blockToolbar: tw`flex items-center mr-1 pointer-events-auto`,\n      dragHandle: [\n        tw`p-0 bg-transparent bg-no-repeat cursor-pointer overflow-hidden outline-none border-none`,\n        tw`minWidth[18px] height[18px]`,\n      ],\n      dropLine: [\n        tw`absolute left-0 right-0 h-0.5 opacity-100`,\n        tw`background[#B4D5FF]`,\n        props.direction === 'top' && tw`-top-px`,\n        props.direction === 'bottom' && tw`-bottom-px`,\n      ],\n    }\n  );\n","import { DragSourceHookSpec, useDrag } from 'react-dnd';\nimport { TEditor, Value } from '@udecode/plate-core';\nimport { DragItemNode } from '../types';\n\nexport interface UseDragNodeOptions\n  extends DragSourceHookSpec<DragItemNode, unknown, { isDragging: boolean }> {\n  id: string;\n}\n\n/**\n * `useDrag` hook to drag a node from the editor. `item` with `id` is required.\n *\n * On drag start:\n * - set `editor.isDragging` to true\n * - add `dragging` class to `body`\n *\n * On drag end:\n * - set `editor.isDragging` to false\n * - remove `dragging` class to `body`\n *\n * Collect:\n * - isDragging: true if mouse is dragging the block\n */\nexport const useDragNode = <V extends Value>(\n  editor: TEditor<V>,\n  { id, item, ...options }: UseDragNodeOptions\n) => {\n  return useDrag<DragItemNode, unknown, { isDragging: boolean }>(\n    () => ({\n      item(monitor) {\n        editor.isDragging = true;\n        document.body.classList.add('dragging');\n\n        const _item = typeof item === 'function' ? item(monitor) : item;\n\n        return {\n          id,\n          ..._item,\n        };\n      },\n      collect: (monitor) => ({\n        isDragging: monitor.isDragging(),\n      }),\n      end: () => {\n        editor.isDragging = false;\n        document.body.classList.remove('dragging');\n      },\n      ...options,\n    }),\n    []\n  );\n};\n","import { DropTargetMonitor, XYCoord } from 'react-dnd';\nimport { DragItemNode, DropDirection } from '../types';\n\nexport interface GetHoverDirectionOptions {\n  dragItem: DragItemNode;\n\n  monitor: DropTargetMonitor;\n\n  /**\n   * The node ref of the node being dragged.\n   */\n  nodeRef: any;\n\n  /**\n   * Hovering node id.\n   */\n  id: string;\n}\n\n/**\n * If dragging a node A over another node B:\n * get the direction of node A relative to node B.\n */\nexport const getHoverDirection = ({\n  dragItem,\n  id,\n  monitor,\n  nodeRef,\n}: GetHoverDirectionOptions): DropDirection => {\n  if (!nodeRef.current) return;\n\n  const dragId = dragItem.id;\n\n  // Don't replace items with themselves\n  if (dragId === id) return;\n\n  // Determine rectangle on screen\n  const hoverBoundingRect = nodeRef.current?.getBoundingClientRect();\n\n  // Get vertical middle\n  const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n  // Determine mouse position\n  const clientOffset = monitor.getClientOffset();\n  if (!clientOffset) return;\n\n  // Get pixels to the top\n  const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n  // Only perform the move when the mouse has crossed half of the items height\n  // When dragging downwards, only move when the cursor is below 50%\n  // When dragging upwards, only move when the cursor is above 50%\n\n  // Dragging downwards\n  // if (dragId < hoverId && hoverClientY < hoverMiddleY) {\n  if (hoverClientY < hoverMiddleY) {\n    return 'top';\n  }\n\n  // Dragging upwards\n  // if (dragId > hoverId && hoverClientY > hoverMiddleY) {\n  if (hoverClientY >= hoverMiddleY) {\n    return 'bottom';\n  }\n};\n","/**\n * Get new direction if updated\n */\nimport { DropLineDirection } from '../types';\n\nexport const getNewDirection = (\n  previousDir: string,\n  dir?: string\n): DropLineDirection | undefined => {\n  if (!dir && previousDir) {\n    return '';\n  }\n\n  if (dir === 'top' && previousDir !== 'top') {\n    return 'top';\n  }\n\n  if (dir === 'bottom' && previousDir !== 'bottom') {\n    return 'bottom';\n  }\n};\n","import { DropTargetMonitor } from 'react-dnd';\nimport {\n  findNode,\n  focusEditor,\n  moveNodes,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { UseDropNodeOptions } from '../hooks/index';\nimport { DragItemNode } from '../types';\nimport { getHoverDirection } from '../utils/index';\n\n/**\n * Callback called on drag an drop a node with id.\n */\nexport const onDropNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    dragItem,\n    monitor,\n    nodeRef,\n    id,\n  }: {\n    dragItem: DragItemNode;\n    monitor: DropTargetMonitor;\n  } & Pick<UseDropNodeOptions, 'nodeRef' | 'id'>\n) => {\n  const direction = getHoverDirection({ dragItem, monitor, nodeRef, id });\n  if (!direction) return;\n\n  const dragEntry = findNode(editor, {\n    at: [],\n    match: { id: dragItem.id },\n  });\n  if (!dragEntry) return;\n  const [, dragPath] = dragEntry;\n\n  focusEditor(editor);\n\n  let dropPath: Path | undefined;\n  if (direction === 'bottom') {\n    dropPath = findNode(editor, { at: [], match: { id } })?.[1];\n    if (!dropPath) return;\n\n    if (Path.equals(dragPath, Path.next(dropPath))) return;\n  }\n\n  if (direction === 'top') {\n    const nodePath = findNode(editor, { at: [], match: { id } })?.[1];\n\n    if (!nodePath) return;\n    dropPath = [...nodePath.slice(0, -1), nodePath[nodePath.length - 1] - 1];\n\n    if (Path.equals(dragPath, dropPath)) return;\n  }\n\n  if (direction) {\n    const _dropPath = dropPath as Path;\n\n    const before =\n      Path.isBefore(dragPath, _dropPath) && Path.isSibling(dragPath, _dropPath);\n    const to = before ? _dropPath : Path.next(_dropPath);\n\n    moveNodes(editor, {\n      at: dragPath,\n      to,\n    });\n  }\n};\n","import { DropTargetMonitor } from 'react-dnd';\nimport {\n  collapseSelection,\n  focusEditor,\n  isExpanded,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-core';\nimport { UseDropNodeOptions } from '../hooks/useDropNode';\nimport { DragItemNode } from '../types';\nimport { getHoverDirection, getNewDirection } from '../utils/index';\n\n/**\n * Callback called when dragging a node and hovering nodes.\n */\nexport const onHoverNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    dragItem,\n    monitor,\n    nodeRef,\n    onChangeDropLine,\n    dropLine,\n    id,\n  }: {\n    dragItem: DragItemNode;\n    monitor: DropTargetMonitor;\n  } & Pick<\n    UseDropNodeOptions,\n    'nodeRef' | 'onChangeDropLine' | 'id' | 'dropLine'\n  >\n) => {\n  const direction = getHoverDirection({\n    dragItem,\n    monitor,\n    nodeRef,\n    id,\n  });\n  const dropLineDir = getNewDirection(dropLine, direction);\n  if (dropLineDir) onChangeDropLine(dropLineDir);\n\n  if (direction && isExpanded(editor.selection)) {\n    focusEditor(editor);\n    collapseSelection(editor);\n  }\n};\n","import { DropTargetHookSpec, DropTargetMonitor, useDrop } from 'react-dnd';\nimport { TReactEditor, Value } from '@udecode/plate-core';\nimport { onDropNode } from '../transforms/onDropNode';\nimport { onHoverNode } from '../transforms/onHoverNode';\nimport { DragItemNode, DropLineDirection } from '../types';\n\nexport interface UseDropNodeOptions\n  extends DropTargetHookSpec<DragItemNode, unknown, { isOver: boolean }> {\n  /**\n   * The reference to the node being dragged.\n   */\n  nodeRef: any;\n\n  /**\n   * Id of the node.\n   */\n  id: string;\n\n  /**\n   * Current value of dropLine.\n   */\n  dropLine: string;\n\n  /**\n   * Callback called on dropLine change.\n   */\n  onChangeDropLine: (newValue: DropLineDirection) => void;\n}\n\n/**\n * `useDrop` hook to drop a node on the editor.\n *\n * On drop:\n * - get hover direction (top, bottom or undefined), return early if undefined\n * - dragPath: find node with id = dragItem.id, return early if not found\n * - focus editor\n * - dropPath: find node with id = id, its path should be next (bottom) or previous (top)\n * - move node from dragPath to dropPath\n *\n * On hover:\n * - get drop line direction\n * - if differs from dropLine, setDropLine is called\n *\n * Collect:\n * - isOver: true if mouse is over the block\n */\nexport const useDropNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  { nodeRef, id, dropLine, onChangeDropLine, ...options }: UseDropNodeOptions\n) => {\n  return useDrop<DragItemNode, unknown, { isOver: boolean }>({\n    drop: (dragItem, monitor) => {\n      onDropNode(editor, { nodeRef, id, dragItem, monitor });\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n    }),\n    hover(item: DragItemNode, monitor: DropTargetMonitor) {\n      onHoverNode(editor, {\n        nodeRef,\n        id,\n        dropLine,\n        onChangeDropLine,\n        dragItem: item,\n        monitor,\n      });\n    },\n    ...options,\n  });\n};\n","import { useState } from 'react';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useEditorRef } from '@udecode/plate-core';\nimport { DropLineDirection } from '../types';\nimport { useDragNode, UseDragNodeOptions } from './useDragNode';\nimport { useDropNode, UseDropNodeOptions } from './useDropNode';\n\nexport interface UseDndNodeOptions\n  extends Pick<UseDropNodeOptions, 'id' | 'nodeRef'>,\n    Pick<UseDragNodeOptions, 'type'> {\n  drag?: UseDragNodeOptions;\n  drop?: UseDropNodeOptions;\n  preview?: {\n    /**\n     * Whether to disable the preview.\n     */\n    disable?: boolean;\n\n    /**\n     * The reference to the preview element.\n     */\n    ref?: any;\n  };\n}\n\n/**\n * {@link useDragNode} and {@link useDropNode} hooks to drag and drop a node from the editor.\n * A default preview is used to show the node being dragged, which can be customized or removed.\n * Returns the drag ref and drop line direction.\n */\nexport const useDndNode = ({\n  id,\n  type,\n  nodeRef,\n  preview: previewOptions = {},\n  drag: dragOptions,\n  drop: dropOptions,\n}: UseDndNodeOptions) => {\n  const editor = useEditorRef();\n\n  const [dropLine, setDropLine] = useState<DropLineDirection>('');\n\n  const [{ isDragging }, dragRef, preview] = useDragNode(editor, {\n    id,\n    type,\n    ...dragOptions,\n  });\n  const [{ isOver }, drop] = useDropNode(editor, {\n    accept: type,\n    id,\n    nodeRef,\n    dropLine,\n    onChangeDropLine: setDropLine,\n    ...dropOptions,\n  });\n\n  if (previewOptions.disable) {\n    drop(nodeRef);\n    preview(getEmptyImage(), { captureDraggingState: true });\n  } else if (previewOptions.ref) {\n    drop(nodeRef);\n    preview(previewOptions.ref);\n  } else {\n    preview(drop(nodeRef));\n  }\n\n  if (!isOver && dropLine) {\n    setDropLine('');\n  }\n\n  return {\n    isDragging,\n    isOver,\n    dropLine,\n    dragRef,\n  };\n};\n","import { TEditor, Value } from '@udecode/plate-core';\nimport { useDragNode } from './useDragNode';\n\nexport const DRAG_ITEM_BLOCK = 'block';\n\n/**\n * {@link useDragNode}\n */\nexport const useDragBlock = <V extends Value>(editor: TEditor<V>, id: string) =>\n  useDragNode<V>(editor, {\n    id,\n    type: DRAG_ITEM_BLOCK,\n  });\n","import { WithPartial } from '@udecode/plate-core';\nimport { useDndNode, UseDndNodeOptions } from './useDndNode';\nimport { DRAG_ITEM_BLOCK } from './useDragBlock';\n\n/**\n * {@link useDndNode}\n */\nexport const useDndBlock = (options: WithPartial<UseDndNodeOptions, 'type'>) =>\n  useDndNode({\n    type: DRAG_ITEM_BLOCK,\n    ...options,\n  });\n","import React, { useRef } from 'react';\nimport useMergedRef from '@react-hook/merged-ref';\nimport { Value } from '@udecode/plate-core';\nimport { useDndBlock } from '../hooks/useDndBlock';\nimport { getDraggableStyles } from './Draggable.styles';\nimport { DraggableProps, DragHandleProps } from './Draggable.types';\n\nconst DefaultDragHandle = ({ styles, ...props }: DragHandleProps) => (\n  <button type=\"button\" {...props} css={styles} />\n);\n\nexport const Draggable = <V extends Value>(props: DraggableProps<V>) => {\n  const { children, element, componentRef, onRenderDragHandle } = props;\n\n  const DragHandle = onRenderDragHandle ?? DefaultDragHandle;\n\n  const blockRef = useRef<HTMLDivElement>(null);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const dragWrapperRef = useRef(null);\n  const multiRootRef = useMergedRef(componentRef, rootRef);\n\n  const { dropLine, dragRef, isDragging } = useDndBlock({\n    id: element.id as string,\n    nodeRef: rootRef,\n  });\n\n  const multiDragRef = useMergedRef(dragRef, dragWrapperRef);\n\n  const styles = getDraggableStyles({\n    ...props,\n    direction: dropLine,\n    isDragging,\n  });\n\n  return (\n    <div\n      css={styles.root.css}\n      className={styles.root.className}\n      ref={multiRootRef}\n    >\n      <div\n        css={[\n          ...(styles.blockAndGutter?.css ?? []),\n          ...(styles.gutterLeft?.css ?? []),\n        ]}\n        className={styles.gutterLeft?.className}\n        contentEditable={false}\n      >\n        <div\n          css={styles.blockToolbarWrapper?.css}\n          className={styles.blockToolbarWrapper?.className}\n        >\n          <div\n            css={styles.blockToolbar?.css}\n            className={styles.blockToolbar?.className}\n            ref={multiDragRef}\n          >\n            <DragHandle\n              element={element}\n              styles={styles.dragHandle?.css}\n              className={styles.dragHandle?.className}\n              onMouseDown={(e: any) => e.stopPropagation()}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div\n        ref={blockRef}\n        css={[\n          ...(styles.blockAndGutter?.css ?? []),\n          ...(styles.block?.css ?? []),\n        ]}\n      >\n        {children}\n\n        {!!dropLine && (\n          <div\n            css={styles.dropLine?.css}\n            className={styles.dropLine?.className}\n            contentEditable={false}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TippyProps } from '@tippyjs/react';\n\nconst GrabberTooltipContent = () => (\n  <div style={{ fontSize: 12 }}>\n    <div>\n      Drag <span style={{ color: 'rgba(255, 255, 255, 0.45)' }}>to move</span>\n    </div>\n  </div>\n);\nexport const grabberTooltipProps: TippyProps = {\n  content: <GrabberTooltipContent />,\n  placement: 'bottom',\n  arrow: false,\n  offset: [0, 0],\n  delay: [300, 0],\n  duration: [0, 0],\n  hideOnClick: true,\n  theme: 'small',\n};\n","import React, { forwardRef, useMemo } from 'react';\nimport {\n  createNodesWithHOC,\n  findNodePath,\n  PlateRenderElementProps,\n  Value,\n} from '@udecode/plate-core';\nimport { useReadOnly } from 'slate-react';\nimport { Draggable } from './Draggable';\nimport { DraggableProps } from './Draggable.types';\n\nexport interface WithDraggableOptions<V extends Value = Value>\n  extends Pick<\n    DraggableProps<V>,\n    'onRenderDragHandle' | 'styles' | 'level' | 'filter' | 'allowReadOnly'\n  > {}\n\nexport const withDraggable = <V extends Value>(\n  Component: any,\n  {\n    styles,\n    level = 0,\n    filter,\n    allowReadOnly = false,\n    onRenderDragHandle,\n  }: WithDraggableOptions<V> = {}\n) => {\n  return forwardRef((props: PlateRenderElementProps<V>, ref) => {\n    const { attributes, element, editor } = props;\n    const readOnly = useReadOnly();\n    const path = useMemo(() => findNodePath(editor, element), [\n      editor,\n      element,\n    ]);\n\n    const filteredOut = useMemo(\n      () =>\n        path &&\n        ((Number.isInteger(level) && level !== path.length - 1) ||\n          (filter && filter(editor, path))),\n      [path, editor]\n    );\n\n    if (filteredOut || (!allowReadOnly && readOnly)) {\n      return <Component {...props} />;\n    }\n\n    return (\n      <Draggable\n        editor={editor}\n        attributes={attributes}\n        element={element}\n        componentRef={ref}\n        styles={styles}\n        onRenderDragHandle={onRenderDragHandle}\n      >\n        <Component {...props} />\n      </Draggable>\n    );\n  });\n};\n\nexport const withDraggables = createNodesWithHOC(withDraggable);\n","import { TReactEditor, Value } from '@udecode/plate-core';\nimport { DRAG_ITEM_BLOCK } from './useDragBlock';\nimport { useDropNode, UseDropNodeOptions } from './useDropNode';\n\n/**\n * {@link useDropNode}\n */\nexport const useDropBlock = <V extends Value>(\n  editor: TReactEditor<V>,\n  options: Omit<UseDropNodeOptions, 'accept'>\n) => useDropNode(editor, { accept: DRAG_ITEM_BLOCK, ...options });\n","import {\n  getNodeEntries,\n  GetNodeEntriesOptions,\n  isBlock,\n  TEditor,\n  Value,\n} from '@udecode/plate-core';\n\n/**\n * Get blocks with an id\n */\nexport const getBlocksWithId = <V extends Value>(\n  editor: TEditor<V>,\n  options: GetNodeEntriesOptions<V>\n) => {\n  const _nodes = getNodeEntries(editor, {\n    match: (n) => isBlock(editor, n) && !!n.id,\n    ...options,\n  });\n  return Array.from(_nodes);\n};\n","import { getRange, TEditor, TNodeEntry, Value } from '@udecode/plate-core';\n\n/**\n * Get node entries range.\n */\nexport const getNodesRange = <V extends Value>(\n  editor: TEditor<V>,\n  nodeEntries: TNodeEntry[]\n) => {\n  if (!nodeEntries.length) return;\n\n  const firstBlockPath = nodeEntries[0][1];\n  const lastBlockPath = nodeEntries[nodeEntries.length - 1][1];\n\n  return getRange(editor, firstBlockPath, lastBlockPath);\n};\n","import {\n  findNode,\n  focusEditor,\n  getStartPoint,\n  select,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-core';\n\n/**\n * Select the start of a block by id and focus the editor.\n */\nexport const focusBlockStartById = <V extends Value>(\n  editor: TReactEditor<V>,\n  id: string\n) => {\n  const path = findNode(editor, { at: [], match: { id } })?.[1];\n  if (!path) return;\n\n  select(editor, getStartPoint(editor, path));\n  focusEditor(editor);\n};\n","import {\n  focusEditor,\n  GetNodeEntriesOptions,\n  removeNodes,\n  TReactEditor,\n  unhangRange,\n  Value,\n} from '@udecode/plate-core';\nimport { getBlocksWithId } from '../queries/getBlocksWithId';\nimport { getNodesRange } from '../queries/getNodesRange';\n\n/**\n * Remove blocks with an id and focus the editor.\n */\nexport const removeBlocksAndFocus = <V extends Value>(\n  editor: TReactEditor<V>,\n  options: GetNodeEntriesOptions<V>\n) => {\n  unhangRange(editor, options?.at, options);\n\n  const nodeEntries = getBlocksWithId(editor, options);\n\n  removeNodes(editor, { at: getNodesRange(editor, nodeEntries) });\n  focusEditor(editor);\n};\n","import {\n  findNode,\n  focusEditor,\n  getRange,\n  select,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-core';\n\n/**\n * Select the block above the selection by id and focus the editor.\n */\nexport const selectBlockById = <V extends Value>(\n  editor: TReactEditor<V>,\n  id: string\n) => {\n  const path = findNode(editor, { at: [], match: { id } })?.[1];\n  if (!path) return;\n\n  select(editor, getRange(editor, path));\n  focusEditor(editor);\n};\n","import { focusEditor, PlateEditor, select, Value } from '@udecode/plate-core';\nimport { Range } from 'slate';\nimport { getBlocksWithId } from '../queries/getBlocksWithId';\nimport { getNodesRange } from '../queries/getNodesRange';\nimport { selectBlockById } from './selectBlockById';\n\n/**\n * Select blocks by selection or by id.\n * If the block with id is not selected, select the block with id.\n * Else, select the blocks above the selection.\n */\nexport const selectBlocksBySelectionOrId = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string\n) => {\n  if (!editor.selection) return;\n\n  const blockEntries = getBlocksWithId(editor, { at: editor.selection });\n  const isBlockSelected = blockEntries.some(\n    (blockEntry) => blockEntry[0].id === id\n  );\n\n  if (isBlockSelected) {\n    select(editor, getNodesRange(editor, blockEntries) as Range);\n    focusEditor(editor);\n  } else {\n    selectBlockById(editor, id);\n  }\n};\n"],"names":["KEY_DND","createDndPlugin","createPluginFactory","key","handlers","onDrop","editor","isDragging","getDraggableStyles","props","createStyles","prefixClassNames","root","selected","css","block","gutterLeft","blockToolbarWrapper","blockToolbar","dragHandle","dropLine","direction","useDragNode","id","item","options","useDrag","monitor","document","body","classList","add","_item","collect","end","remove","getHoverDirection","dragItem","nodeRef","current","dragId","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","getNewDirection","previousDir","dir","onDropNode","dragEntry","findNode","at","match","dragPath","focusEditor","dropPath","Path","equals","next","nodePath","slice","length","_dropPath","before","isBefore","isSibling","to","moveNodes","onHoverNode","onChangeDropLine","dropLineDir","isExpanded","selection","collapseSelection","useDropNode","useDrop","drop","isOver","hover","useDndNode","type","preview","previewOptions","drag","dragOptions","dropOptions","useEditorRef","setDropLine","useState","dragRef","accept","disable","getEmptyImage","captureDraggingState","ref","DRAG_ITEM_BLOCK","useDragBlock","useDndBlock","DefaultDragHandle","styles","Draggable","children","element","componentRef","onRenderDragHandle","DragHandle","blockRef","useRef","rootRef","dragWrapperRef","multiRootRef","useMergedRef","multiDragRef","className","blockAndGutter","e","stopPropagation","GrabberTooltipContent","fontSize","color","grabberTooltipProps","content","placement","arrow","offset","delay","duration","hideOnClick","theme","withDraggable","Component","level","filter","allowReadOnly","forwardRef","attributes","readOnly","useReadOnly","path","useMemo","findNodePath","filteredOut","Number","isInteger","withDraggables","createNodesWithHOC","useDropBlock","getBlocksWithId","_nodes","getNodeEntries","n","isBlock","Array","from","getNodesRange","nodeEntries","firstBlockPath","lastBlockPath","getRange","focusBlockStartById","select","getStartPoint","removeBlocksAndFocus","unhangRange","removeNodes","selectBlockById","selectBlocksBySelectionOrId","blockEntries","isBlockSelected","some","blockEntry"],"mappings":"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"}