import React from 'react';
import { Value } from '@udecode/plate-core';
import { DraggableProps } from './Draggable.types';
export interface WithDraggableOptions<V extends Value = Value> extends Pick<DraggableProps<V>, 'onRenderDragHandle' | 'styles' | 'level' | 'filter' | 'allowReadOnly'> {
}
export declare const withDraggable: <V extends Value>(Component: any, { styles, level, filter, allowReadOnly, onRenderDragHandle, }?: WithDraggableOptions<V>) => React.ForwardRefExoticComponent<import("@udecode/plate-core").PlateRenderNodeProps<V, import("@udecode/plate-core").PlateEditor<V>> & Omit<import("slate-react").RenderElementProps, "element"> & {
    element: import("@udecode/plate-core").ElementOf<import("@udecode/plate-core").TEditor<V>>;
} & React.RefAttributes<unknown>>;
export declare const withDraggables: <V extends Value>(components: any, options: (Partial<WithDraggableOptions<V>> & import("@udecode/plate-core").AnyObject & {
    key?: string | undefined;
    keys?: string[] | undefined;
}) | (Partial<WithDraggableOptions<V>> & import("@udecode/plate-core").AnyObject & {
    key?: string | undefined;
    keys?: string[] | undefined;
})[]) => any;
//# sourceMappingURL=withDraggable.d.ts.map